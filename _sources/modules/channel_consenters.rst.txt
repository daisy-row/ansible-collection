..
.. SPDX-License-Identifier: Apache-2.0
..

:github_url: https://github.com/IBM-Blockchain/ansible-collection/edit/main/plugins/modules/channel_consenters.py


channel_consenters -- Manage the consenters for a Hyperledger Fabric channel
============================================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Specify the consenters for a Hyperledger Fabric channel.

This module works with the IBM Support for Hyperledger Fabric software or the Hyperledger Fabric Open Source Stack running in a Red Hat OpenShift or Kubernetes cluster.






Parameters
----------

  api_endpoint (required)
    The URL for the Fabric operations console.

    | **Type**: str

  api_authtype (required)
    :literal:`basic` - Authenticate to the Fabric operations console using basic authentication. You must provide both a valid API key using :emphasis:`api\_key` and API secret using :emphasis:`api\_secret`.

    | **Type**: str

  api_key (required)
    The API key for the Fabric operations console.

    | **Type**: str

  api_secret
    The API secret for the Fabric operations console.

    Only required when :emphasis:`api\_authtype` is :literal:`basic`.

    | **Type**: str

  api_timeout
    The timeout, in seconds, to use when interacting with the Fabric operations console.

    | **Type**: int
    | **Default value**: ``60``

  path (required)
    Path to current the channel configuration file.

    This file can be fetched by using the :strong:`ERROR while parsing`\ : While parsing "M(channel\_config)" at index 39: Module name "channel\_config" is not a FQCN module.

    This file will be updated in place. You will need to keep a copy of the original file for computing the configuration update.

    | **Type**: str

  ordering_service
    The ordering service to use as the consenters for this channel. All ordering service nodes in this ordering service will be used as the consenters for this channel.

    You can pass a string, which is the cluster name of a ordering service registered with the Fabric operations console.

    You can also pass a list, which must match the result format of one of the :strong:`ERROR while parsing`\ : While parsing "M(ordering\_service\_info)" at index 76: Module name "ordering\_service\_info" is not a FQCN or :strong:`ERROR while parsing`\ : While parsing "M(ordering\_service)" at index 104: Module name "ordering\_service" is not a FQCN modules.

    Cannot be specified with :emphasis:`ordering\_service\_nodes`.

    | **Type**: raw

  ordering_service_nodes
    The ordering service nodes to use as the consenters for this channel.

    You can pass strings, which are the names of ordering service nodes that are registered with the Fabric operations console.

    You can also pass a dict, which must match the result format of one of the :strong:`ERROR while parsing`\ : While parsing "M(ordering\_service\_node\_info)" at index 76: Module name "ordering\_service\_node\_info" is not a FQCN or :strong:`ERROR while parsing`\ : While parsing "M(ordering\_service\_node)" at index 109: Module name "ordering\_service\_node" is not a FQCN modules.

    Cannot be specified with :emphasis:`ordering\_service`.

    | **Type**: list
    | **Elements**: raw








Examples
--------

.. code-block:: yaml+jinja

    
    - name: Set channel consenters from ordering service
      hyperledger.fabric_ansible_collection.channel_consenters:
        api_endpoint: https://console.example.org:32000
        api_authtype: basic
        api_key: xxxxxxxx
        api_secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        path: channel_config.bin
        ordering_service: Ordering Service

    - name: Set channel consenters from ordering service nodes
      hyperledger.fabric_ansible_collection.channel_consenters:
        api_endpoint: https://console.example.org:32000
        api_authtype: basic
        api_key: xxxxxxxx
        api_secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        path: channel_config.bin
        ordering_service_nodes:
          - Ordering Service_1
          - Ordering Service_2
          - Ordering Service_5



