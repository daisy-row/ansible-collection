..
.. SPDX-License-Identifier: Apache-2.0
..

:github_url: https://github.com/IBM-Blockchain/ansible-collection/edit/main/plugins/modules/certificate_authority_metadata.py


certificate_authority_metadata -- Update metadata for a Hyperledger Fabric certificate authority
================================================================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Update metadata for a Hyperledger Fabric certificate authority.

This module works with the IBM Support for Hyperledger Fabric software or the Hyperledger Fabric Open Source Stack running in a Red Hat OpenShift or Kubernetes cluster.






Parameters
----------

  api_endpoint (required)
    The URL for the the Fabric operations console.

    | **Type**: str

  api_authtype (required)
    :literal:`basic` - Authenticate to the the Fabric operations console using basic authentication. You must provide both a valid API key using :emphasis:`api\_key` and API secret using :emphasis:`api\_secret`.

    | **Type**: str

  api_key (required)
    The API key for the the Fabric operations console.

    | **Type**: str

  api_secret
    The API secret for the the Fabric operations console.

    Only required when :emphasis:`api\_authtype` is :literal:`basic`.

    | **Type**: str

  api_timeout
    The timeout, in seconds, to use when interacting with the the Fabric operations console.

    | **Type**: int
    | **Default value**: ``60``

  name (required)
    The name of the peer.


  preferred_url
    Preferred URL style for the components.

    os is used the open source style with standard ports (443)

    legacy is the software as a service style URLs


  wait_timeout
    The timeout, in seconds, to wait until the certificate authority is available.

    | **Type**: int
    | **Default value**: ``60``








Examples
--------

.. code-block:: yaml+jinja

    
    - name: Get certificate authority
      hyperledger.fabric_ansible_collection.certificate_authority_action:
        api_endpoint: https://console.example.org:32000
        api_authtype: basic
        api_key: xxxxxxxx
        api_secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        name: Org1 Peer
        preferred_url: os



Return Values
-------------

  exists
    True if the certificate authority exists, false otherwise.

    | **Returned**: always
    | **Type**: boolean

  certificate_authority
    The certificate authority.

    | **Returned**: if certificate authority exists
    | **Type**: dict

    name
      The name of the certificate authority.

      | **Type**: str
      | **Sample**: ``Org1 CA``

    api_url
      The URL for the API of the certificate authority.

      | **Type**: str
      | **Sample**: ``https://org1ca-api.example.org:32000``

    operations_url
      The URL for the operations service of the certificate authority.

      | **Type**: str
      | **Sample**: ``https://org1ca-operations.example.org:32000``

    ca_url
      The URL for the API of the certificate authority.

      | **Type**: str
      | **Sample**: ``https://org1ca-api.example.org:32000``

    ca_name
      The certificate authority name to use for enrollment requests.

      | **Type**: str
      | **Sample**: ``ca``

    tlsca_name
      The certificate authority name to use for TLS enrollment requests.

      | **Type**: str
      | **Sample**: ``tlsca``

    location
      The location of the certificate authority.

      | **Type**: str
      | **Sample**: ``ibmcloud``

    pem
      The TLS certificate chain for the certificate authority.

      The TLS certificate chain is returned as a base64 encoded PEM.

      | **Type**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

    tls_cert
      The TLS certificate chain for the certificate authority.

      The TLS certificate chain is returned as a base64 encoded PEM.

      | **Type**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``



